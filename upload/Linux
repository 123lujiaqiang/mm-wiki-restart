**tenyun:内网：172.21.0.12 公网：82.156.47.92**

**yiyun: 内网：192.168.0.71；公网：113.125.38.203**

## top命令监控系统资源使用率

```shell
$ top 
# 监控整个linux系统的使用情况

$ df -h
# 查看系统存储信息

#Filesystem      Size  Used Avail Use% Mounted on
#devtmpfs        909M     0  909M   0% /dev
#tmpfs           919M   28K  919M   1% /dev/shm
#文件系统        存储大小  已用 可用   使用率 挂载点

$ lsblk 查看待扩展的磁盘总空间
$ fdisk -l 磁盘详细信息
```



## linux系统连接方式

**方式一：**

1. 运行cmd命令
2. ping ip 看服务器是否是开启的
3. ssh root@ip 选择连接服务器的地址
4. 输入密码（密码保护模式，密码不显示，正常输入即可）

**方法二:**

使用Xshell工具进行通信连接即可。



## linux系统查看

```shell
$ lscpu  查看cpu信息

$ ifconfig  查看系统的ip地址

$ cat /etc/issue 查看当前操作系统内核

$ cat /proc/cpuinfo  查看系统的cpu详细信息

$ as -v
$ ld -v

$ echo $变量名  # 查看单个环境变量
$ env  # 参看所有环境变量
```

## linux安装服务的命令

```shell
# rpm 文件的安装
$ wget 下载rpm 文件
# 安装 文件
$ rpm -ivh xx.rpm 

# yum 下载安装
$ yum install 

# tar.zip 文件解压安装
$ tar -zxvf xxx.tar.zip
```

## linux命令行交互工具

```properties
expect是Linux中交互的好工具。
#需要下载
apt  install expect

#如果报错 命令找不到commed，，。。。
#expect明明已经安装了

#但是还是会报spawn命令找不到

#原来是#!/usr/bin/expect -f   要写在第一行


#!/usr/bin/expect  #第一行必不可少，表明调用expect  替换成 #!/usr/bin/expect -f
set timeout 10
spawn vncpasswd    #spawn是expect中的命令，调用vncpasswd命令
expect "Password:" #expect当遇到“Password”时
send "123456\n"    #送入“123456”并回车，windows中是\r\n，linux中只需\n
expect "Verify:"
send "123456\n"
interact           #返回终端

#例子
#可以实现vncpasswd自动赋值
#!/usr/bin/expect -f
spawn vncpasswd
expect "Password:"
send "1234567\n"
expect "Verify:"
send "1234567\n"
expect "Would you like to enter a view-only password (y/n)?"
send "n\n"
interact

# 接收参数并赋值 可以结合docker做很多的事
#ecpect文件中使用系统环境变量 puts $env(HOME)  puts类似于echo
#!/usr/bin/expect -f
set pass [lrange $argv 0 0]
spawn vncpasswd
expect "Password:"
#send "1234567\n"
send "$pass\n"
expect "Verify:"
#send "1234567\n"
send "$pass\n"
expect "Would you like to enter a view-only password (y/n)?"
send "n\n"
interact


```





## SSH服务

```bash
# 1、查询SSH的安装状态

$ rpm -qa |grep ssh
# 上面的命令可能出现提示说rpm未安装，可以使用下面这命令进行安装

$ sudo apt-get install rpm
# 某些帖子上也可以使用yum进行装，但是可能出现yum未安装的提示，如果yum未安装，可以使用如下命令进行安装

$ sudo apt-get install yum
 

# 2、安装SSH

# 可以使用如下任意一个命令

$ apt-get install ssh
# 或者

$ yum install ssh
#经过上面2步后发现压根没有卵用，上面的步骤参考的：#http://jingyan.baidu.com/article/08b6a591f0fafc14a9092275.html，直接继续看其他blog。
#后来参考：http://www.linuxidc.com/Linux/2015-03/115056.htm

# SSH 服务器的安装：
$ sudo apt-get install openssh-server

# SSH 客户端的安装：
$ sudo apt-get install openssh-client

# 启动SSH服务
$ sudo service ssh start
# 或者
$ sudo service ssh restart

# 查看SSH的版本

$ ssh -V

#下面使用SSH客户端工具就可以连接到这台linux了。
```

### 使用ifconfig命令查看本机ip

```properties
ens33: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.89.128  netmask 255.255.255.0  broadcast 192.168.89.255
        inet6 fe80::8f6d:73f:7fe2:4f1f  prefixlen 64  scopeid 0x20<link>
        ether 00:0c:29:59:99:db  txqueuelen 1000  (以太网)
        RX packets 815  bytes 306778 (306.7 KB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 374  bytes 44374 (44.3 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (本地环回)
        RX packets 219  bytes 18735 (18.7 KB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 219  bytes 18735 (18.7 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

```

ens33的

## linux文件树

### ~：当前用户目录（非root下）

### /：根目录（root）

### /home：当前用户目录

### /usr：存放系统环境等

### /mnt：可以用来存放资源文件

### /opt：也可以用来存放资源文件



```
1、linux 中目录结构

/boot/ ： 存放系统启动文件，内核文件等。

/etc/ ：存放系统服务配置文件。

/proc/ : 存放系统服务配置文件。

/dev/ : 存放硬件的映射文件目录。

/home/ : 所有普通用户的默认家目录。

/root/ : 超级管理员的默认家目录。

/var/ ：存放系统中动态变化的文件，如日志等。

/usr/ : 存放其他用户的文件目录，通常为程序文件等。

/bin/ ：存放所有用户都可以执行的并经常执行的命令文件。

/sbin/ ： 存放系统中基本的管理命令，通常管理员才有权限执行。
/tmp/： 系统中的临时文件存放目录。


```

### 系统颜色表示 

**蓝色表示目录；**

**绿色表示可执行文件；**

**红色表示压缩文件；**

**浅蓝色表示链接文件；**

**灰色表示其它文件；**

**红色闪烁表示链接的文件有问题了；**

**黄色是设备文件，包括block, char, fifo。**

**用dircolors -p看到缺省的颜色设置，包括各种颜色和“粗体”，下划线，闪烁等定义。**

### 跨服务器交换数据

```shell
#SCP命令获取远程服务器上的目录：
$ scp -P port -r user@ip:/home/xxx/ /home/xxx/

#SCP命令获取远程服务器上的文件：
$ scp -P port user@ip:/home/xxx.xxx /home/xxx.xxx

#SCP命令将本地目录上传到远程服务器：
$ scp -P port  -r /home/xxx/ user@ip:/home/xxx/

#SCP命令将本地文件上传到远程服务器：
$ scp -P port  /home/xxx.xxx user@ip:/home/xxx.xxx
```



### 文件访问操作

1. **ls （选项）查看当前目录下的所有文件**
   
   1. -a：显示所有档案及目录（“.“是为隐藏，不会列出）
   2. -A：显示除隐藏文件“.”和“..”以外的所有文件列表
   3. -C：多列显示输出结果
   4. 很多不多赘述
   
2. **cd (选项)（参数） 切换用户当前工作目录**
   
   1. cd ~ 表示为home directory的意思
   2. cd .  表示目前所在的目录
   3. cd .. 表示目前目录位置的上一层目录
   4. cd 进入用户主目录
   5. cd ~ 进入用户主目录
   6. cd - 返回进入此目录之前所在的目录
   7. cd .. 返回上级目录
   8. cd ../.. 返回上两级目录
   9. cd !$ 把上个命令的参数作为cd参数使用
   
3. **pwd （选项）**

   显示用户当前工作目录（是用来显示用户当前的工作路径的，它是以绝对路径的形式显示的）

4. **mv （选项）（参数）移动文件目录命令**

   1. --backup=<备份模式>：如需要覆盖文件，则覆盖前当先行备份；
   2. -b：当文件存在时，覆盖前，为其创建一个备份；
   3. -f：若目标文件或目录与现有文件或目录重复，则直接覆盖现有的文件或目录；
   4. -i：交互操作，覆盖询问用户；
   5. -S：为备份文件指定后缀，而不适用默认的后缀
   6. -u：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。

5. **mkdir 创建目录命令**

   1. -Z：设置安全上下文，当使用SELinux时有效；
   2. -m<目标属性>或--mode<目标属性>建立目录的同时设置目录的权限；
   3. -p或--parents若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录；
   4. --version显示版本信息
   5. 创建一个文件夹
      1. mkdir myfolder
      2. ls查看

6. **tree （选项）（参数）命令（命令以树状图列出目录的内容）**

   1. -a：显示所有文件和目录
   2. 其他不做介绍

7. **cp （选项）（参数）复制命令，用来将一个或多个源文件或者目录复制到指定的目录的文件或目录。**

   1. -d：当赋值符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录。
   2. -f：强行复制文件或目录，不论目标文件或目录是否存在；
   3. -i：覆盖既有文件之前询问用户
   4. -p：保留源文件或目录属性；
   5. -b：覆盖已经存在的文件目标前将目标文件备份；
   6. -v：详细显示命令执行的操作
   7. 使用
      1. cp a.py a/ ：复制a.py到a文件夹中
      2. cp a.py b.py ：把文件复制到当前文件夹，并改名



### 查找文件操作

**1.格式：**

find +目录 +条件 +条件值

 **2.1.根据文件格式进行查找：**

​    在/home下查找所有以 .txt 结尾的文件： find /home -name “*.txt" ：

  在/home下查找不是以 .txt 结尾的文件：find /home ! -name ".txt" ！表示否定 (文件太多，截取部分)： 

**2.2.根据文件类型进行查找：**

   -type 为类型参数

            f     表示文件
            d    表示目录
            c    表示字符设备
            b    表示块设备
            s    表示套接字
            l     表示链接
    
       查找/mnt下的子目录：find /mnt -type d ：
   **2.3.根据文件目录层数查找：**

        find --maxdepth+层数  按最大层数查找
    
               --mindepth+层数  按最小层数查找
    
         find /home -maxdepth 2 -type f   查找/hoem下目录最大层数为2层的文件：
  **2.4.按文件大小进行查找：**

          -size为文件大小单元
    
          -size -n：指小于nk
    
          -size +n：指大于nk
    
          -size n ：指等于nk
    
           find /mnt -type f -size -100  在/mnt目录下查找小于100K的文件：
  **2.5.根据文件权限进行查找：**

​     -perm 文件权限指数

​     find /mnt -type f -perm 660 在/mnt下查找权限为660的文件



### 文件压缩与解压

```bash
$ tar -zxvf node-v10.16.0-linux-x64.tar.gz

$ tar -cvf /home/www/images.tar /home/www/images ← 仅打包，不压缩
$ tar -zcvf /home/www/images.tar.gz /home/www/images ← 打包后，以gzip压缩

-c ：create 建立压缩档案的参数；
-x ： 解压缩压缩档案的参数；
-z ： 是否需要用gzip压缩；
-v： 压缩的过程中显示档案；
-f： 置顶文档名，在f后面立即接文件名，不能再加参数

压缩并指定目录
举例：$ zip -r /home/kms/kms.zip /home/kms/server/kms

解压并指定目录

举例：$ unzip /home/kms/kms.zip -d /home/kms/server/kms
```



 ![在这里插入图片描述](https://img-blog.csdnimg.cn/20190328141451656.png)



#### 打包压缩文件 

```properties
-c	创建新的档案文件
-C	指定到目录。注意：该目录必须存在
-f	指定打包的文件名。在f之后要立即接打包文件名！不能再加参数！
-x	解压
-O	将文件解压到标准输出
-p	使用原文件的原来属性
-P	创建归档文件，使用绝对路径
-t	列出档案文件中的内容
-r	向压缩归档文件末尾追加文件
-u	更新原压缩包中的文件
-v	显示详细过程
-z	使用gzip压缩，一般格式为xx.tar.gz或xx. tgz
-Z	有compress
-j	使用bzip2压缩，一般格式为xxx.tar.bz2
--exclude	在压缩过程中，排除某个文件
--remove-files	在完成打包后，删除原文件夹


```

#### 分卷压缩

```shell
#由于从linux上下载文件时如果大于4G，使用sz命令无法下载，所以需要将文件分卷压缩
#1、将大文件压缩成1G的文件：
$ cat mydata.zip | split -b 1G - mydata_20200302.zip.

#其中mydata.zip为大文件名称，mydata_20200302.zip.为是拆分后文件的前缀，默认分拆后文件名称为mydata_20200302.zip.aa,ab,ac…类推

#将这些压缩文件合并成一个压缩文件,打开cmd输入：

$ copy /B mydata_20200302.zip.aa + mydata_20200302.zip.ab new_mydata.zip，
# 此时就会在当前目录生成new_mydata.zip，为最后的待解压文件。

```



| **语法：tar [参数]** **压缩包名** **一个或多被打包的文件** | 功能                     |
| ---------------------------------------------------------- | ------------------------ |
| 作用                                                       | 压缩一个或多个文件       |
| **-c**                                                     | 必须，创建一个压缩包     |
| **-v**                                                     | 可选，显示压缩的详细信息 |
| **-z**                                                     | 压缩，如果没有则只是打包 |
| **-f <压缩文件名>**                                        | 后面必须指定文件名       |
| **-p**                                                     | 保持文件绝对路径         |



#### 解压文件

```shell
$tar -zxvf

#1. 压缩保留源文件的方法：
$   gzip –c filename > filename.gz
#2. Linux解压缩保留源文件的方法：
 $  gunzip –c filename.gz > filename
```

| **语法1：tar [参数]** **压缩文件** |
| ---------------------------------- |
| **解压文件到当前目录下**           |

| **语法2：tar [参数]** **压缩文件 -C** **目录** | 参数说明           |
| ---------------------------------------------- | ------------------ |
| **解压到指定的目录下**                         |                    |
| **-x**                                         | 解压文件           |
| **-v**                                         | 显示解压文件列表   |
| **-f<压缩文件>**                               | 指定要解压的文件名 |
| **-C**                                         | 解压到指定的目录下 |





### 文件复制移动

```bash
mv 文件名  /路径地址
mv命令还可以用来改名 :mv 文件名  要修改的名字

cp 文件名  /路径地址
cp -r 递归赋值 用于复制目录
```



### 文件上传和下载**

**命令工具：rz（上传）sz(下载)**

需要在root用户下

安装命令：

```properties
$ yum install -y lrzsz

rz 调出本地弹框
sz filename 将filename下载下来

#-a, –ascii
#-b, –binary 用binary的方式上传下载，不解释字符为ascii
#-e, –escape 强制escape 所有控制字符，比如Ctrl+x，DEL等
#rar,gif等文件文件采用 -b 用binary的方式上传。
#文件比较大而上传出错的话，采用参数 -e
#如果用不带参数的rz命令上传大文件时，常常上传一半就断掉了，很可能是rz以为上传的流中包含某些特殊控制字符，造成rz提前退出。
```

 ![linux文件上传下载方法](https://exp-picture.cdn.bcebos.com/8974c38a59de450751a000c55e413a8ca708853a.jpg?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_500%2Climit_1%2Fquality%2Cq_80)

#### **工具实现**

 首先要安装RZ功能命令为：# yum install lrzsz 

```properties
linux下提供了zip和unzip命令。zip是压缩，unzip是解压缩。举例如下：

#zip myFile.zip *jpg

将所有jpg文件压缩成一个压缩包。

#unzip myFile.zip

将myFile.zip中的所有文件解压出来。
```

```properties
cd到待传文件所在的路径：

执行命令：scp   jdk-8.tar.gz   root@192.168.0.108:/home/root

                            目标文件               目标服务器       目标路径   
```

**从Linux服务器下载文件夹到本地**

```shell
1、使用scp命令
scp /home/work/source.txt work@192.168.0.10:/home/work/   
#把本地的source.txt文件拷贝到192.168.0.10机器上的/home/work目录下

scp work@192.168.0.10:/home/work/source.txt /home/work/   
#把192.168.0.10机器上的source.txt文件拷贝到本地的/home/work目录下

scp work@192.168.0.10:/home/work/source.txt work@192.168.0.11:/home/work/   #把192.168.0.10机器上的source.txt文件拷贝到192.168.0.11机器的/home/work目录下

scp -r /home/work/sourcedir work@192.168.0.10:/home/work/   
#拷贝文件夹，加-r参数
```



### 创建文件夹及文件

#### 1. 创建文件夹

```
mkdir 文件夹名
```

### 创建文件

```
touch 文件名
```



## linux中文件编辑

#### 编辑

```
vi  文件
vim 文件

cat 查看文件
```

#### 进入编辑模式

```
a:
i:
o:
按下以上任意按键进入编辑模式，vi窗口下方显示--INSERT--字眼
```



#### 编辑退出

**按ESC键 跳到命令模式，然后：**

```
:w 保存文件但不退出vi
:w file 将修改另外保存到file中，不退出vi
:w! 强制保存，不推出vi
:wq 保存文件并退出vi
:wq! 强制保存文件，并退出vi
:q 不保存文件，退出vi
:q! 不保存文件，强制退出vi
:e! 放弃所有修改，从上次保存文件开始再编辑
```



## linux程序运行操作

### 查看一个服务的安装位置

```
rpm -ql 服务名称

rpm -ql nginx
```



### 程序运行

**ctrl+c和ctrl+z都是中断命令,但是他们的作用却不一样.**

**ctrl+c是强制中断程序的执行,进程已经终止。**

**ctrl+z的是将任务中止（**暂停的意思）

但是此任务并没有结束,他仍然在进程中他只是维持挂起的状态,用户可以使用fg/bg操作继续前台或后台的任务,fg命令重新启动前台被中断的任务,bg命令把被中断的任务放在后台执行. 

##### 查看系统服务

```bash
$ chkconfig --list( 2~5为on，说明mysql服务会随机器启动而自动启动； )
```

##### 查看系统端口

```bash
$ netstat -tulpn 
```

##### 查看对应应用进程

```bash
$ ps -ef | grep mysqld
```

## 关于linxu系统的全局权限

```bash
# 使用sudo -i命令提升用户权限
# 普通用户直接提升为root
$ sudo -i

```





# Centos系统

## Centos系统升级内核

```
启动wordpress报错：
WordPress not found in /var/www/html - copying now...
Complete! WordPress has been successfully copied to /var/www/html
[Thu Oct 27 01:20:30.149476 2022] [:crit] [pid 1] (38)Function not implemented: AH00141: Could not initialize random number generator

Linux 3.10.0-123.el7.x86_64  旧
Linux 6.0.5-1.el7.elrepo.x86_64 新
```



```bash
#首先查看现在的内核版本

uname -sr

#方法有很多，大多数现代发行版提供了一种使用 yum 等包管理系统和官方支持的仓库升级内核的方法。但是，这只会升级内核到仓库中可用的最新版本，而不是在https://www.kernel.org/ 中可用的最新版本。所以我们用另外的方法，因为CentOS 是允许使用 ELRepo这个第三方库的，所有我们需要在 CentOS 7 上启用 ELRepo 仓库用来升级最新内核

rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm

#安装最新的主线内核版本

yum --enablerepo=elrepo-kernel install kernel-ml

#接下来将其设置为默认启动项，修改GRUB，先查看一下默认值，肯定不是0

cat /etc/default/grub

#用vim编辑器打开并编辑 /etc/default/grub 并设置 GRUB_DEFAULT=0，编辑退出应该都知道，为了保持格式就不放命令了

vim /etc/default/grub

#接下来重新创建内核配置

grub2-mkconfig -o /boot/grub2/grub.cfg

#最后提升done后，reboot重启机器，重新查看升级后内核即可



#参考https://cloud.tencent.com/developer/article/1922228
```



## 系统防火墙管理

### 安装防火墙及SSH及HTTP(如果没有的话)

```shell

#安装wget
$ yum -y install wget

# 安装防火墙
$ yum install firewalld systemd -y

# 安装SSH协议
$ yum install -y curl policycoreutils-python openssh-server

# 设置SSH服务开机自启动
$ systemctl enable sshd

#启动SSH 服务
$ systemctl start sshd

# 添加HTTP服务到firewalld
$ firewall-cmd --permanent --add-serveice=http

# 添加HTTPS服务到firewalld
$ firewall-cmd --permanent --add-service=https

```



### Centos6

```bash
# centos6下面
# 1:查看防火状态
$ service  iptables status
# 2:暂时关闭防火墙
$ service  iptables stop
# 3:永久关闭防火墙
$ chkconfig iptables off
# 4:重启防火墙
$ service iptables restart  
# 5:永久关闭后重启
$ chkconfig iptables on　（没试过） 
```

### **CentOS7防火墙**

```bash
# 查看
$ systemctl status firewalld.service
# 关闭
$ systemctl stop firewalld.service
# 禁用
$ systemctl disable firewalld.service
```

```bash
# 查看防火墙状态 
$ systemctl status firewalld

# 开启防火墙 
$ systemctl start firewalld  

# 关闭防火墙 
$ systemctl stop firewalld

# 开启防火墙 
$ service firewalld start 

# 若遇到无法开启先用：
$ systemctl unmask firewalld.service 

# 然后：
$ systemctl start firewalld.service
```

### 开启指定端口

```bash
# 查询指定端口是否已开  
$ firewall-cmd --query-port=8094/
# tcp提示 yes，表示开启；no表示未开启。
```

```bash
# 添加指定需要开放的端口：
$ firewall-cmd --add-port=8094/tcp --permanent

# 重载入添加的端口：
$ firewall-cmd --reload

# 查询指定端口是否开启成功：
$ firewall-cmd --query-port=8094/tcp
```

```bash
# 移除指定端口：
$ firewall-cmd --permanent --remove-port=8094/tcp
```

```bash
# 查看所有的开放的端口号：
$ firewall-cmd --list-ports
```

```bash
# 查看防火墙有哪些服务
$ firewall-cmd --get-services

# 查看防火墙开启了哪些服务
$ firewall-cmd --list-services

# 添加http访问服务(要不然端口开放了也是访问不了)
$ firewall-cmd --add-service=http --permanent

# 查看所有开放的端口
$ firewall-cmd --zone=public  --list-ports 

# 添加永久(--permanent)开放端口(80)
$ firewall-cmd --zone=public --add-port=80/tcp --permanent 

# 开启对外放访问
$ firewall-cmd --add-port=80/tcp --permanent

# 删除端口
$ firewall-cmd --zone= public --remove-port=80/tcp --permanent

# 查看
$ firewall-cmd --zone= public --query-port=80/tcp

# 查看使用的端口
$ netstat -ntlp

```



## linu下启动和停止某个服务

```
1、启动服务

直接用./xxx.py 文件就可以运行，但是如果想后台运行，即使关闭当前的终端也可以运行的话，需要nohup命令和&命令。
(1)、&命令

功能：加在命令的最后。作用是可以把这个命令放在后台执行，比如我们服务会打印日志，如果我们加上&后，就不会显示了。
(2)、nohup命令

功能：不挂断的运行命令

[root@localhost]# nohup  ./demo.py  >filename 2>&1 &

    1

2、查看当前后台运行的命令

有两个命令可以用，jobs和ps,区别是jobs用于查看当前终端后台运行的任务，换了终端就看不到了。而ps命令用于查看瞬间进程的动态，可以看到别的终端运行的后台进程。
(1)、jobs命令

功能：查看当前终端后台运行的任务
图1
jobs -l选项可显示当前终端所有任务的PID，jobs的状态可以是running，stopped，Terminated。+ 号表示当前任务，- 号表示后一个任务。
(2)、ps命令

功能：查看当前的所有进
ps -aux | grep “test.sh” #a:显示所有程序 u:以用户为主的格式来显示 x:显示所有程序，不以终端机来区分
3、关闭当前后台运行的命令

kill命令：结束进程
（1）通过jobs命令查看jobnum，然后执行 kill %jobnum
（2）通过ps命令查看进程号PID，然后执行 kill %PID
如果是前台进程的话，直接执行 Ctrl+c 就可以终止了
4、前后台进程的切换与控制

(1)、fg命令
功能：将后台中的命令调至前台继续运行
如果后台中有多个命令，可以先用jobs查看jobnun，然后用 fg %jobnum 将选中的命令调出。
(2)、Ctrl + z 命令
功能：将一个正在前台执行的命令放到后台，并且处于暂停状态
(3)、bg命令
功能：将一个在后台暂停的命令，变成在后台继续执行
如果后台中有多个命令，可以先用jobs查看jobnum，然后用 bg %jobnum 将选中的命令调出继续执行


```

### 停止某个node服务

```
pkill node
```











## linux删除文件

```
 ①rm命令格式：

rm [选项] 文件…

②rm命令功能：

删除一个目录中的一个或多个文件或目录，如果没有使用- r选项，则rm不会删除目录。如果使用rm来删除文件，通常仍可以将该文件恢复原状。

③rm命令参数：

-f：--force强制删除文件，从不给出提示，但是会忽略不存在的文件

-i：--interactive 进行交互式删除

-r, -R：--recursive 指示rm将参数中列出的全部目录和子目录均递归地删除。

-v： --verbose 详细显示进行的步骤

--help 显示此帮助信息并退出

--version 输出版本信息并退出

linux删除目录很简单，很多人还是习惯用rmdir，不过一旦目录非空，就陷入深深的苦恼之中，现在使用rm -rf命令即可。

直接rm就可以了，不过要加两个参数-rf 即：rm -rf 目录名字

-r 就是向下递归，不管有多少级目录，一并删除

-f 就是直接强行删除，不作任何提示的意思

④rm命令使用方法：

1、Linux删除文件夹命令

rm -rf /var/log/httpd/access

将会删除/var/log/httpd/access目录以及其下所有文件、文件夹

2、Linux删除文件命令

rm -f /var/log/httpd/access.log

将会强制删除/var/log/httpd/access.log这个文件

3、Linux批量删除文件命令

Linux中批量删除文件，可以直接执行删除命令：rm -rf 文件1 文件2 ……

其中参数 r 和 f ：r是递归删除，比如你要删除某个目录，而目录里面还有子目录或者文件的话就要加r这个参数，f参数是强制删除的意思，另外，如果文件很多，可以通过通配符*来批量删除，例如：rm -rf 1* 就是删除所有以1开头的文件或目录，* 直接通配了任意数量的任意字符。

4、Linux删除隐藏文件命令

我们知道在linux下隐藏文件是以“.”开头的，单纯的使用ls命令是看不到的，需要加上“-a”参数才可以。Linux删除隐藏文件可以使用命令：rm -fr .*(删除当前目录下的所有隐藏文件)， rm -f .tmp(删除tmp文件)，rm -fr .tmp(删除tmp目录或者文件)

注意事项：使用这个rm -rf的时候一定要格外小心，linux没有回收站的。rm是一个危险的命令，使用的时候要特别当心，尤其对于新手，否则整个系统就会毁在这个命令(比如在/(根目录)下执行rm * -rf)。所以，我们在执行rm之前好先确认一下在哪个目录，到底要删除什么东西，操作时保持高度清醒的头脑。

补充说明：执行rm指令可删除文件或目录，如欲删除目录必须加上参数”-r”，否则预设仅会删除文件。
```

**linux删除及卸载安装包**

```
1.查询安装过的包
yum list installed | grep docker
或者
rpm -qa | grep -i mysql
 
2.删除安装的软件包
yum -y remove docker-engine.x86_64
 或者
 rpm -e MySQL -*
 
 rpm -e MySQL-client-5.6.23-1.el6.x86_64
rpm -e MySQL-server-5.6.23-1.el6.x86_64

3.删除镜像/容器等
rm -rf /var/lib/docker


```



## linux中创建及删除用户

### 操作权限问题

```bash
# 在其他用户下 提升操作权限
$ sudo -i

# 切换用户
$ su name
```



### root权限问题

```bash
#2. 如何重置或破解Ubuntu 20.04密码
#如果您现在可以使用普通用户登录，但不知道root用户密码，请尝试使用以下指令重置root用户密码：

$ sudo passwd root
#如果修改成功。任务结束。

#如果提示没有sudo权限，那就开始破解Ubuntu 20.0.4 的root用户密码吧。
#————————————————
#版权声明：本文为CSDN博主「一口Linux」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
#原文链接：https://blog.csdn.net/daocaokafei/article/details/114582210
```



### 一.创建用户

我所知道的有两个创建用户的命令：

### 1. useradd

  用法：

```
$useradd 选项 用户名
选项：
-c comment 指定一段注释性描述。
-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。
-g 用户组 指定用户所属的用户组。
-G 用户组，用户组 指定用户所属的附加组。
-s Shell文件 指定用户的登录Shell。
-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。




Options:
  -b, --base-dir BASE_DIR       设置用户家目录的父目录
  -d, --home-dir HOME_DIR       设置用户的家目录
  -g, --gid GROUP               设置用户的组id或组名
  -G, --groups GROUPS           设置用户的附加ID
  -m, --create-home             创建用户时创建用户家目录
  -M, --no-create-home          创建用户时不创建用户家目录
  -o, --non-unique              允许用户的uid重复
  -p, --password PASSWORD       设置用户的登录密码,一般不会在创建时指定。
  -s, --shell SHELL             设置用户所用的shell
  -u, --uid UID                 用户的uid
  -U, --user-group              创建用户时创建组，组名和用户名相同
```

但是这个命令更像是一个指令，创建完后就返回，后续还需要`passwd`命令来设置新用户的密码：

```
`passwd`用法：`passwd 选项 用户名` 

选项:
-l 锁定口令，即禁用账号。
-u 口令解锁。
-d 使账号无口令。
-f 强迫用户下次登录时修改口令。
如果默认用户名，则修改当前用户的口令

```

### 2. 创建用户示例

```
useradd user1

为用户设置密码：passwd user1


查看用户信息：cat /etc/passwd
查看用户密码：cat /etc/shadow
```





### 3. adduser

相比于useradd，`adduser`更方便一些，它像是一个程序，会提示你需要哪些信息，按照它的提示填写就好，并且会默认为新用户分配一个./home/新用户名的目录。
`adduser`用法：

```
$adduser newname
```

### 4. 删除用户

```java
$deluser –remove-home newname
```



### 5. 创建用户

```
sudo adduser xxx //在home目录下创建一个用户
sudo useradd xxx //仅添加一个用户，但home目录下不创建账号
```

### 6. 创建用户组

```
groupadd -h 查看groupadd所有的参数

groupadd group1 创建group1用户组

查看：cat /etc/group

修改用户组： groupmod -h
  
删除用户组：groupdel   -h


 -g, --gid GID                 修改组ID(GID)
  -n, --new-name NEW_GROUP      修改组名
  -o, --non-unique              允许设置的组ID重复
  -p, --password PASSWORD       修改组密码
```

####  

#### 1. 用户属于一个初始组，两个附加组。用户的有效组是初始组。

```
切换用户初始组命令 newgrp 附加组组名
使用 newgrp 命令一边切换 user1 的初始组，一边创建文件。

touch test1_file   // 创建文件
mkdir test1_dir    创建文件夹
newgrp group2      切换用户初始组
touch test2_file   创建文件
mkdir test2_dir    创建文件夹
newgrp group3      切换用户初始组
touch test3_file   创建文件
mkdir test3_dir    创建文件夹

```

#### 2. 初始用户组及用户组所属文件

```
创建文件及文件夹，随后更改用户的初始组

[usertest@VM-0-12-centos ~]$ touch test1_file
[usertest@VM-0-12-centos ~]$ mkdir test1_file
mkdir: cannot create directory ‘test1_file’: File exists
[usertest@VM-0-12-centos ~]$ mkdir test1_dir
[usertest@VM-0-12-centos ~]$ newgrp group2
[usertest@VM-0-12-centos ~]$ touch test2_file
[usertest@VM-0-12-centos ~]$ mkdir test2_dir
[usertest@VM-0-12-centos ~]$ newgrp group3
[usertest@VM-0-12-centos ~]$ touch test3_file
[usertest@VM-0-12-centos ~]$ mkdir test3_dir

查看用户当前文件夹下的 文件及文件夹所属的用户组

[usertest@VM-0-12-centos ~]$ ll
total 12
drwxr-xr-x 2 usertest group1 4096 Dec  1 09:44 test1_dir
-rw-r--r-- 1 usertest group1    0 Dec  1 09:44 test1_file
drwxr-xr-x 2 usertest group2 4096 Dec  1 09:45 test2_dir
-rw-r--r-- 1 usertest group2    0 Dec  1 09:45 test2_file
drwxr-xr-x 2 usertest group3 4096 Dec  1 09:45 test3_dir
-rw-r--r-- 1 usertest group3    0 Dec  1 09:45 test3_file

```

#### 3. 解读

##### r表示可读，w表示可写，x表示可执行 

```
d rwx r-x r-x 2 usertest group1 4096 Dec  1 09:44 test1_dir
-rw-r--r-- 1 usertest group1    0 Dec  1 09:44 test1_file

(1)第一组只有一个字符，表示条目的类型：
	-：普通文件

	d：目录

	l：软链接

	c：字符设备，例如键盘、鼠标

	b：块文件，例如硬盘;

(2)第二组有9个字符，每3个表达一个意思：
		第1-3个表示文件所有者的权限，
			rwx
		第4-6个表示文件所在组的用户的权限，
			r-x
		第7-9个表示文件其他组的权限。
			r-x

(3) 第三组是一个数字，对于文件来说是硬链接数，通常是1，对于目录是其下的子目录数量(包含隐藏子目录)。

(4) 第四组表示文件的所有者。

(5) 第五组表示文件的所在组。

(6) 第六组是一个数字，表示其大小(KB)。

(7) 第七组是日期时间，表示文件或目录的最后修改时间。

(8) 第八组是文件名或目录的名字。
```

|      | 文件                                        | 目录                                       |
| ---- | ------------------------------------------- | ------------------------------------------ |
| -    | 无权限                                      | 无权限                                     |
| r    | 可以用cat、more、less等命令查看文件内容     | 可以用ls命令查看目录下的内容               |
| w    | 可以用vi、vim编辑器修改文件，但不代表可删除 | 可以在目录内增加、删除、重命名文件或子目录 |
| x    | 可执行                                      | 可以用cd命令进入该目录                     |



### 7. 文件或目录所属用户与用户组更改

**所属用户更改 命令 chown**

```
chown [-R] username source

其中，username为修改后的用户名，source为文件或目录的路径名称，-R表示级联修改目录下面的子目录和文件的所有者。
```

**所属用户组更改命令chgrp**

```
chgrp [-R] groupname source

其中，groupname为修改后的组名，source为文件或目录的路径名称，-R表示级联修改目录下面的子目录和文件的所在组。注意修改文件的所有者和所在组是相互独立的事件，互不影响。
```

**所属用户与用户组同时修改命令 chown**

```
chown [-R] username:groupname source

其中，username为修改后的用户名，groupname为修改后的组名，source为文件或目录的路径名称，-R表示级联修改目录下面的子目录和文件的所在组。这里的用户和组没有必然联系，即username不一定要属于groupname的那个组。
```

 **测试修改用户与组**
创建用户 feng 默认初始组 feng 

```
useradd feng
passwd feng
```

**修改对应文件及文件夹的所属权限**

```properties
将test1_file所属用户修改为feng
chown feng test1_file  

将test1_dir及子目录所属用户修改为feng
chown -R feng test1_dir/   

将test2_file的所属用户组修改为feng
chgrp feng test2_file

将test2_dir及子目录的所属用户组修改为feng
chgrp -R feng test2_dir/

将test3_file的所属用户及用户组都修改为feng
chown feng:feng test3_file

将test3_dir的所属用户及用户组都修改为feng
chown -R feng:feng test3_fir
```

### 8.文件权限的修改

```bash
# 777 代表文件的所有用户拥有所有权限 每一个7代表一种用户的权限 777 代表 rwx-rwx-rwx
# 755

$ chmod 744 client.cpp
```





## linux中建立软链接的方法

**建立软链接，是为了将一个命令全局调**用

**以安装node为例：**

将安装位置处的执行文件，软链接到全局/usr/local/bin/node中

```shell
$ sudo ln -s /home/ubuntu/node-v4.5.0-linux-x86/bin/node /usr/local/bin/node  
  
$ sudo ln -s /home/ubuntu/node-v4.5.0-linux-x86/bin/npm /usr/local/bin/npm 

```



## linux中使用screen

Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。

在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。


```shell
$> screen [-AmRvx -ls -wipe][-d <作业名称>][-h <行数>][-r <作业名称>][-s ][-S <作业名称>]
 
-A 　将所有的视窗都调整为目前终端机的大小。
-d   <作业名称> 　将指定的screen作业离线。
-h   <行数> 　指定视窗的缓冲区行数。
-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。
-r   <作业名称> 　恢复离线的screen作业。
-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。
-s 　指定建立新视窗时，所要执行的shell。
-S   <作业名称> 　指定screen作业的名称。
-v 　显示版本信息。
-x 　恢复之前离线的screen作业。
-ls或--list 　显示目前所有的screen作业。
-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。
```



#### 常用screen参数

```shell
$ screen -S yourname -> 新建一个叫yourname的session
$ screen -ls         -> 列出当前所有的session
$ screen -r yourname -> 回到yourname这个session
$ screen -d yourname -> 远程detach某个session
$ screen -d -r yourname -> 结束当前session并回到yourname这个session
```

#### 在Session下，使用ctrl+a(C-a) 

```properties
C-a ? -> 显示所有键绑定信息
C-a c -> 创建一个新的运行shell的窗口并切换到该窗口
C-a n -> Next，切换到下一个 window 
C-a p -> Previous，切换到前一个 window 
C-a 0..9 -> 切换到第 0..9 个 window
Ctrl+a [Space] -> 由视窗0循序切换到视窗9
C-a C-a -> 在两个最近使用的 window 间切换 
C-a x -> 锁住当前的 window，需用用户密码解锁
C-a d -> detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 
C-a z -> 把当前session放到后台执行，用 shell 的 fg 命令则可回去。
C-a w -> 显示所有窗口列表
C-a t -> time，显示当前时间，和系统的 load 
C-a k -> kill window，强行关闭当前的 window
C-a [ -> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样
    C-b Backward，PageUp 
    C-f Forward，PageDown 
    H(大写) High，将光标移至左上角 
    L Low，将光标移至左下角 
    0 移到行首 
    $ 行末 
    w forward one word，以字为单位往前移 
    b backward one word，以字为单位往后移 
    Space 第一次按为标记区起点，第二次按为终点 
    Esc 结束 copy mode 
C-a ] -> paste，把刚刚在 copy mode 选定的内容贴上
```



#### 基本使用命令

```bash
// 新建一个screen窗口
screen -S serverName

// 然后在里面运行程序

ctrl+a+d切换Linux窗口，后台程序不会断

// 关闭会话
screen -X -S sessioname   you want to kill Or quit

// 查看所有会话
screen -ls

// 进入会话
screen -r sessionName
```

## linux中centos安装age-get

```bash
#第一步

$ curl https://raw.githubusercontent.com/dvershinin/apt-get-centos/master/apt-get.sh -o /usr/local/bin/apt-get


#第二步
$ chmod 0755 /usr/local/bin/apt-get

```

## linux中环境配置的文件

```bash
# ~/.bashrc文件用于配置全局环境
# 可以配置一些操作命令的简写等等

$ vim ~/.bashrc

# 修改

# 重新加载
$ source ~/.bashrc
```

## centos中的rpm使用

```bash
# 如果没有安装 则需要安装rpm
$ yum install rpm -y

rpm -q [选项]

-qa：显示当前系统中以RPM方式安装的所有软件列表。
-qi（i：information） ： 查看指定软件包的名称，版本，许可协议等详细信息。
-ql(l:list)：查看指定软件包的安装目录。
-qf(f:file)：查看查看指定的文件或目录是由那个软件包所安装。
-qc：查看指定软件包的要安装的配置文件（.conf）。
-qd：查看指定软件包中的压缩文件。

# 安装，升级，卸载 RPM软件包
rpm [选项] RPM软件包文件 ...
# 常用选项：
-i -U -F

-i 安装
-U 升级
-F 检查
#      卸载指定的RPM软件      rpm -e 软件名

# 辅助选项：
--force强制 --nodeps不检查依赖件 -h以“#”号显示安装进度 -v安装过程中的详细信息


#重建rpm数据库

rpm -rebuilddb
rpm --initdb
```





# ubuntu系统介绍

![1649217813196](C:\Users\L\AppData\Roaming\Typora\typora-user-images\1649217813196.png)

```properties
/bin  二进制可执行命令。该目录下存放着普通用户的命令

/dev  系统的设备文件，即设备的驱动程序

/home  用户主目录的基点

/lost-found 这个目录平时是空的，当系统非正常关机而留下的“无家可归”的文件便会储存在这里

/misc  储存着一些特殊的字符的定义

/net  存放着和网络相关的一些文件

/proc  存放着用户与内核的交互信息

/sbin  系统的管理命令，这里存放的是系统管理员使用的程序

/srv  系统启动服务时可以访问的数据库目录

/tmp  临时文件，重启后自动清空

/var  某些大文件的溢出区，比如各种服务的日志文件

/boot  启动linux的核心文件

/etc  系统所有的配置文件都在这个目录中

/lib  存放着和系统运行相关的库文件 

/media  存放着可移除的设备，比如软盘，光盘

/mnt  挂载目录，是系统管理员临时安装文件的系统安装点

/opt  (option : 自由选择)主要给源码安装软件时选择的安装目录位置

/root  超级用户的目录

/selinux 主要用来加固操作系统，提高系统的安全性

/sys  管理设备文件

/usr  最大的目录，存放着应用程序和文件
————————————————

原文链接：https://blog.csdn.net/xieyihua1994/article/details/89403811


或者

bin	存放普通用户可执行的指令	即使在单用户模式下也能够执行处理
boot	开机引导目录	包括Linux内核文件与开机所需要的文件
dev	设备目录	所有的硬件设备及周边均放置在这个设备目录中
etc	各种配置文件目录	大部分配置属性均存放在这里
lib/lib64	开机时常用的动态链接库	bin及sbin指令也会调用对应的lib库
media	可移除设备挂载目录	类似软盘 U盘 光盘等临时挂放目录
mnt	用户临时挂载其他的文件系统	额外的设备可挂载在这里,相对临时而言
opt	第三方软件安装目录	现在习惯性的放置在/usr/local中
proc	虚拟文件系统	通常是内存中的映射,特别注意在误删除数据文件后，比如DB，只要系统不重启,还是有很大几率能将数据找回来
root	系统管理员主目录	除root之外,其他用户均放置在/home目录下
run	系统运行是所需文件	以前防止在/var/run中,后来拆分成独立的/run目录。重启后重新生成对应的目录数据
sbin	只有root才能运行的管理指令	跟bin类似,但只属于root管理员
snap	ubunut全新软件包管理方式	snap软件包一般在/snap这个目录下
srv	服务启动后需要访问的数据目录	
sys	跟proc一样虚拟文件系统	记录核心系统硬件信息
tmp	存放临时文件目录	所有用户对该目录均可读写
usr	应用程序放置目录	
var	存放系统执行过程经常改变的文件	
vmlinuz	软连接到boot下的vmlinuz-4.4.0-87-generic
————————————————
原文链接：https://blog.csdn.net/qq_35339990/article/details/78611373
```



## ubuntu安装glibc

```bash
# apt-get install build-essential

```

## ubuntu更新全部内容

```bash
$ sudo apt-get upgrade

# sudo找不到
#1、首先你先看一下你的 /etc/sudoers.d 文件不存在 ， 如果没有的话就说明你的系统就没有安装下面是安装命令 ：

$ apt-get install sudo



```

## ubuntu命令参数

```bash
$ apt-get install 是 ubuntu 下的软件安装命令。

$ sudo apt-get -y install：
$ -y：yes，在命令行交互提示中，直接输入 yes；
# 1. 使用 add-apt-repository 为 apt-get 添加 PPA
# 比如为安装 emacs 需添加某 PPA（Personal Package Archives : Ubuntu）：

$ sudo add-apt-repository ppa:ubuntu-elisp/ppa
$ sudo apt-get update
$ sudo apt-get install emacs-snapshot emacs-snapshot-el

# 添加docker源：

$ sudo add-apt-repository \
       "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
       $(lsb_release -cs) \
       stable"
$ sudo apt-get update

$ –no-install-recommends
$ –no-install-recommends参数来避免安装非必须的文件，从而减小镜像的体积：
# 3. -f：解决包依赖的问题
$ sudo apt-get -f install
# 4. apt-get upgrade 与 apt-get dist-upgrade
$ apt-get upgarde 和dist-upgrade的差别

# 二者的区别同样在于对包的依赖关系的处理上：

# upgrade：系统将现有的 Package 升级，如果有相依性的问题，而此相依性需要安装其它新的
# Package或影响到其它Package的相依性时，此Package就不会被升级，会保留下来；
#一种相对稳妥保险的做法；不替用户做更多的操作；
dist-upgrade：
如果遇到依赖性问题，需要安装新的Package（或移除旧的 package）,就会试着去安装/移除它.

```

## ubuntu系统清理

```bash
#  一、删除缓存
# 1，非常有用的清理命令：
sudo apt-get autoclean                 清理旧版本的软件缓存
sudo apt-get clean                     清理所有软件缓存
sudo apt-get autoremove              删除系统不再使用的孤立软件
$ 这三个命令主要清理升级缓存以及无用包的。

 #  2，清理opera firefox的缓存文件：
$ ls ~/.opera/cache4
$ ls ~/.mozilla/firefox/*.default/Cache

#  3，清理Linux下孤立的包：
# 终端命令下我们可以用：
$ sudo apt-get install deborphan -y

#   4，卸载：tracker
# 这个东西一般我只要安装ubuntu就会第一删掉tracker 他不仅会产生大量的cache文件而且还会影响开机速# 度。所以在新得利里面删掉就行。
# 附录：
# 包管理的临时文件目录:
# 包在
# /var/cache/apt/archives
# 没有下载完的在
# /var/cache/apt/archives/partial

 # 二、删除软件
# ubuntu软件的删除一般用“ubuntu软件中心”或“新立得”就能搞定，但有时用命令似乎更快更好～～
$ sudo apt-get remove --purge 软件名
$ sudo apt-get autoremove                                                         # 删除系统不再使用的孤立软件
$ sudo apt-get autoclean                                                             清理旧版本的软件缓存
$dpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P               
#清除残余的配置#文件
# 保证干净。

#   三、删除多余内核
# 1，首先要使用这个命令查看当前Ubuntu系统使用的内核
uname -a

  2，再查看所有内核
dpkg --get-selections|grep linux

  3，最后小心翼翼地删除吧
sudo apt-get remove linux-image-2.6.32-22-generic
ps：linux-image-xxxxxx-generic     就是要删除的内核版本
还有
#linux-headers-xxxxxx
#linux-headers-xxxxxx-generic     总之中间有“xxxxxx”那段的旧内核都能删，注意一般选内核号较小的删
```



## ubuntu换源

```properties
#备份原来的源
$ sudo cp /etc/apt/sources.list /etc/apt/sources_init.list

# 将以前的源备份一下，以防以后可以用的。

# 更换源
$ sudo gedit /etc/apt/sources.list
1
# 使用gedit打开文档，将下边的阿里源复制进去，然后点击保存关闭。

# 阿里源 （Ubuntu 18.04）
deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse


#3.更新
#更新源

$ sudo apt-get update

#复损坏的软件包，尝试卸载出错的包，重新安装正确版本的。

$ sudo apt-get -f install

#更新软件

 $ sudo apt-get upgrade
 
4.其他常用源
deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial main restricted universe multiverse
#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial main restricted universe multiverse

deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-security main restricted universe multiverse
#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-security main restricted universe multiverse

deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-updates main restricted universe multiverse
#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-updates main restricted universe multiverse

#deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-backports main restricted universe multiverse
#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-backports main restricted universe multiverse

#deb http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-proposed main restricted universe multiverse
#deb-src http://linux.xidian.edu.cn/mirrors/ubuntu/ xenial-proposed main restricted universe multiverse

# 清华源
# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse

# 预发布软件源，不建议启用
# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse

# 网易源
deb http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse
deb-src http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse

# ubuntu官方国内源

# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to
# newer versions of the distribution.
deb http://cn.archive.ubuntu.com/ubuntu focal main restricted
# deb-src http://cn.archive.ubuntu.com/ubuntu focal main restricted

## Major bug fix updates produced after the final release of the
## distribution.
deb http://cn.archive.ubuntu.com/ubuntu focal-updates main restricted
# deb-src http://cn.archive.ubuntu.com/ubuntu focal-updates main restricted

## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team. Also, please note that software in universe WILL NOT receive any
## review or updates from the Ubuntu security team.
deb http://cn.archive.ubuntu.com/ubuntu focal universe
# deb-src http://cn.archive.ubuntu.com/ubuntu focal universe
deb http://cn.archive.ubuntu.com/ubuntu focal-updates universe
# deb-src http://cn.archive.ubuntu.com/ubuntu focal-updates universe

## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team, and may not be under a free licence. Please satisfy yourself as to
## your rights to use the software. Also, please note that software in
## multiverse WILL NOT receive any review or updates from the Ubuntu
## security team.
deb http://cn.archive.ubuntu.com/ubuntu focal multiverse
# deb-src http://cn.archive.ubuntu.com/ubuntu focal multiverse
deb http://cn.archive.ubuntu.com/ubuntu focal-updates multiverse
# deb-src http://cn.archive.ubuntu.com/ubuntu focal-updates multiverse

## N.B. software from this repository may not have been tested as
## extensively as that contained in the main release, although it includes
## newer versions of some applications which may provide useful features.
## Also, please note that software in backports WILL NOT receive any review
## or updates from the Ubuntu security team.
deb http://cn.archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse
# deb-src http://cn.archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse

## Uncomment the following two lines to add software from Canonical's
## 'partner' repository.
## This software is not part of Ubuntu, but is offered by Canonical and the
## respective vendors as a service to Ubuntu users.
# deb http://archive.canonical.com/ubuntu focal partner
# deb-src http://archive.canonical.com/ubuntu focal partner

deb http://cn.archive.ubuntu.com/ubuntu focal-security main restricted
# deb-src http://cn.archive.ubuntu.com/ubuntu focal-security main restricted
deb http://cn.archive.ubuntu.com/ubuntu focal-security universe
# deb-src http://cn.archive.ubuntu.com/ubuntu focal-security universe
deb http://cn.archive.ubuntu.com/ubuntu focal-security multiverse
# deb-src http://cn.archive.ubuntu.com/ubuntu focal-security multiverse

#阿里源
复制阿里ubuntu源20.04

deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse

```



## linxu系统设置中文环境

### 中文环境

如果不需要中文环境，可以忽略这一步。设置中文环境会让镜像体积增大一些。
server的环境，默认是英文的。导致我们的vnc界面打开后也是英文的。如何设置成中文呢？

设置中文环境

#### 查看当前语言环境

echo $LANG
1

#### 查看当前系统是否有中文语言包

locale -a
1
如果没有中文则，安装中文语言包。

apt install language-pack-zh-hans
1

#### 修改系统环境变量为中文

然后，修改/etc/environment（在文件的末尾追加）：

LANG="zh_CN.UTF-8"
LANGUAGE="zh_CN:zh:en_US:en"
1
2
vim /etc/profile
1
增加以下内容：

LANG="zh_CN.UTF-8"
LANGUAGE="zh_CN:zh:en_US:en"

1
2
3
vim ~/.bashrc
1
增加以下内容：

LANG="zh_CN.UTF-8"
LANGUAGE="zh_CN:zh:en_US:en"

1
2
3
最后，执行命令：

sudo locale-gen
1
立马生效执行以下：

source ~/.bashrc







## Linux安装MySql

**Centos7**

### linux中mysql的启停

```shell
#启动
service mysqld start
#停止
service mysqld stop

#开机自启
service enable mysqld
#关闭开机自启
service disable mysqld
systemctl disable mysqld
```



# MySQL安装及命令

## 安装

```sh
#拉取镜像
sudo docker pull mysql:5.7


#查看
sudo docker images


# 启动容器
docker run -d -p 3306:3306 -v /usr/local/mysql/conf:/etc/mysql/conf.d -v /usr/local/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysq01 mysql:5.7 



#-d 后台运行
#-p 端口映射 。-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务
#-v 卷挂载 。 /usr/local/mysql/conf:/etc/mysql/conf.d ：将到本地 /usr/local/mysql/conf挂载到容器的 /etc/mysql/my.cnf。后面修改配置文件，只需要再本地 /usr/local/mysql/conf修改即可，不需要进入容器里面进行修改
#-e 环境配置。 -e MYSQL_ROOT_PASSWORD=123456 配置数据库连接密码为123456
#–name 容器名字

```



## 命令

### 新建数据库

字符集：utf8 排序规则：utf8_general_ci

```mysql
create database 数据库名 DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
```


执行完成后，验证数据库是否创建成功，执行命令show databases;查看是否有test数据库

```mysql
show databases;
```

进入数据库

```shell
mysql -u root -p 
输入密码
```



### 导入sql文件

1、把sql文件上传到[Linux](https://so.csdn.net/so/search?from=pc_blog_highlight&q=Linux)服务器上

- 通过winscp工具(其它xftp工具也可以)，把sql文件上传到/home目录下

2、导入sql文件

- 在终端执行以下命令，更改要导入的数据库

```mysql
use test
```

- 然后执行以下命令，导入sql文件

```mysql
 source /home/test.sql;
```

### 导出sql文件

1、导出sql文件(包含表结构和数据)

```mysql
mysqldump -u用户名 -p密码 数据库名 > 数据库名.sql
```



### code-server启动

### `export PASSWORD="你的密码" && ./code-server --host 0.0.0.0 --port 8080`

















## tenyun服务器环境

mysql密码：LJQljq981218@

学习服务器，docker

## guiyun服务器目前环境

mysql密码：LJQljq981218

### 注意：linux中一般将环境应用安装到/usr/local目录下面

nginx--->80

mysql--->3306

node--->10.17.0

npm

cnpm

pm2

docker

**控制台开发端口**

80、81、82、8080、3306、22、443、20-21、3000、8000、3389

